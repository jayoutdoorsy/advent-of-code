// Generated by JavaScript APG, Version [`apg-js2`](https://github.com/ldthomas/apg-js2)
export default function () {
  'use strict';
  //```
  // SUMMARY
  //      rules = 9
  //       udts = 0
  //    opcodes = 35
  //        ---   ABNF original opcodes
  //        ALT = 1
  //        CAT = 6
  //        REP = 4
  //        RNM = 15
  //        TLS = 7
  //        TBS = 1
  //        TRG = 1
  //        ---   SABNF superset opcodes
  //        UDT = 0
  //        AND = 0
  //        NOT = 0
  //        BKA = 0
  //        BKN = 0
  //        BKR = 0
  //        ABG = 0
  //        AEN = 0
  // characters = [32 - 117]
  //```
  /* OBJECT IDENTIFIER (for internal parser use) */
  this.grammarObject = 'grammarObject';

  /* RULES */
  this.rules = [];
  this.rules[0] = { name: 'game', lower: 'game', index: 0, isBkr: false };
  this.rules[1] = { name: 'gameId', lower: 'gameid', index: 1, isBkr: false };
  this.rules[2] = { name: 'rounds', lower: 'rounds', index: 2, isBkr: false };
  this.rules[3] = { name: 'round', lower: 'round', index: 3, isBkr: false };
  this.rules[4] = { name: 'cube', lower: 'cube', index: 4, isBkr: false };
  this.rules[5] = { name: 'cubeCount', lower: 'cubecount', index: 5, isBkr: false };
  this.rules[6] = { name: 'cubeColor', lower: 'cubecolor', index: 6, isBkr: false };
  this.rules[7] = { name: 'DIGIT', lower: 'digit', index: 7, isBkr: false };
  this.rules[8] = { name: 'SP', lower: 'sp', index: 8, isBkr: false };

  /* UDTS */
  this.udts = [];

  /* OPCODES */
  /* game */
  this.rules[0].opcodes = [];
  this.rules[0].opcodes[0] = { type: 2, children: [1, 2, 3, 4, 5, 6] }; // CAT
  this.rules[0].opcodes[1] = { type: 7, string: [103, 97, 109, 101] }; // TLS
  this.rules[0].opcodes[2] = { type: 4, index: 8 }; // RNM(SP)
  this.rules[0].opcodes[3] = { type: 4, index: 1 }; // RNM(gameId)
  this.rules[0].opcodes[4] = { type: 7, string: [58] }; // TLS
  this.rules[0].opcodes[5] = { type: 4, index: 8 }; // RNM(SP)
  this.rules[0].opcodes[6] = { type: 4, index: 2 }; // RNM(rounds)

  /* gameId */
  this.rules[1].opcodes = [];
  this.rules[1].opcodes[0] = { type: 3, min: 1, max: Infinity }; // REP
  this.rules[1].opcodes[1] = { type: 4, index: 7 }; // RNM(DIGIT)

  /* rounds */
  this.rules[2].opcodes = [];
  this.rules[2].opcodes[0] = { type: 2, children: [1, 2] }; // CAT
  this.rules[2].opcodes[1] = { type: 4, index: 3 }; // RNM(round)
  this.rules[2].opcodes[2] = { type: 3, min: 0, max: Infinity }; // REP
  this.rules[2].opcodes[3] = { type: 2, children: [4, 5, 6] }; // CAT
  this.rules[2].opcodes[4] = { type: 7, string: [59] }; // TLS
  this.rules[2].opcodes[5] = { type: 4, index: 8 }; // RNM(SP)
  this.rules[2].opcodes[6] = { type: 4, index: 3 }; // RNM(round)

  /* round */
  this.rules[3].opcodes = [];
  this.rules[3].opcodes[0] = { type: 2, children: [1, 2] }; // CAT
  this.rules[3].opcodes[1] = { type: 4, index: 4 }; // RNM(cube)
  this.rules[3].opcodes[2] = { type: 3, min: 0, max: Infinity }; // REP
  this.rules[3].opcodes[3] = { type: 2, children: [4, 5, 6] }; // CAT
  this.rules[3].opcodes[4] = { type: 7, string: [44] }; // TLS
  this.rules[3].opcodes[5] = { type: 4, index: 8 }; // RNM(SP)
  this.rules[3].opcodes[6] = { type: 4, index: 4 }; // RNM(cube)

  /* cube */
  this.rules[4].opcodes = [];
  this.rules[4].opcodes[0] = { type: 2, children: [1, 2, 3] }; // CAT
  this.rules[4].opcodes[1] = { type: 4, index: 5 }; // RNM(cubeCount)
  this.rules[4].opcodes[2] = { type: 4, index: 8 }; // RNM(SP)
  this.rules[4].opcodes[3] = { type: 4, index: 6 }; // RNM(cubeColor)

  /* cubeCount */
  this.rules[5].opcodes = [];
  this.rules[5].opcodes[0] = { type: 3, min: 1, max: Infinity }; // REP
  this.rules[5].opcodes[1] = { type: 4, index: 7 }; // RNM(DIGIT)

  /* cubeColor */
  this.rules[6].opcodes = [];
  this.rules[6].opcodes[0] = { type: 1, children: [1, 2, 3] }; // ALT
  this.rules[6].opcodes[1] = { type: 7, string: [114, 101, 100] }; // TLS
  this.rules[6].opcodes[2] = { type: 7, string: [103, 114, 101, 101, 110] }; // TLS
  this.rules[6].opcodes[3] = { type: 7, string: [98, 108, 117, 101] }; // TLS

  /* DIGIT */
  this.rules[7].opcodes = [];
  this.rules[7].opcodes[0] = { type: 5, min: 48, max: 57 }; // TRG

  /* SP */
  this.rules[8].opcodes = [];
  this.rules[8].opcodes[0] = { type: 6, string: [32] }; // TBS

  // The `toString()` function will display the original grammar file(s) that produced these opcodes.
  this.toString = function () {
    var str = '';
    str += 'game      = "Game" SP gameId ":" SP rounds\n';
    str += 'gameId    = 1*DIGIT\n';
    str += '\n';
    str += 'rounds    = round *( ";" SP round )\n';
    str += 'round     = cube *( "," SP cube )\n';
    str += 'cube      = (cubeCount SP cubeColor)\n';
    str += '\n';
    str += 'cubeCount = 1*DIGIT\n';
    str += 'cubeColor = "red" / "green" / "blue"\n';
    str += '\n';
    str += '; rfc5234\n';
    str += 'DIGIT          =  %x30-39\n';
    str += 'SP            =  %x20\n';
    return str;
  };
}
